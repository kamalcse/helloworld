-- Git Setup
--The order of priority of the Git config is local, global, and system, respectively
$ git config --global user.name "Kamal"
$ git config --global user.email "kamal.cse.du@gmail.com"
$ git config [--global | --local | --system] --list
$ git config --global core.editor Vim   //To select a different text editor, such as Vim
$ Git config -global color.ui true    //to set these color themes

-- Git Tools
$ git gui // to run the git gui 
$ gitk [git log options] // to run gitk tools

-- Git create new repository and clone 
$ git init [Demo]  //to create a local repository
$ git clone <repository URL>  // to clone or Make a local copy of the server repository.

--Add a change to staging area
$ git add [Filename | .]  //add file(s)
$ git add*

--Track changes
$ git diff  //Track the changes that have not been staged
$ git diff --staged  //Track the changes that have staged but not committed
$ git diff HEAD  //Track the changes after committing a file
$ git diff Git Diff Branches:  //Track the changes between two commits:
$ git diff < branch 2>
$ git status // Display the state of the working directory and the staging area.
$ git show     //Shows objects

--Commit a change
$ git commit -m " Commit Message"
$ git commit -a 

--Push
$ git push origin [branch_name] //sends the local commits from the specified <branch> to the <remote> repository
$ git push --all   //pushes all the branches to the server repository
$ git push --all <remote>
git push --tags <remote>  //push all the tags (annotated and lightweight tags) from your local repository to the specified <remote>
$ git push [-f | --force]  // forcefully push your local branch to the remote repository, even if it results in a non-fast-forward update. Use this with caution, as it can overwrite other developers' changes
$ git push origin --delete <branch>  //Delete a remote branch by push command
$ git push [--set-upstream | -u] <remote> <branch>  //set the upstream branch for the current local branch. It establishes a tracking relationship between the local and remote branches. After setting the upstream, you can simply use git push without specifying the remote and branch names

-- Pull 
$ git pull URL
$ git pull --all  //fetch changes from all remote repositories and branches and then merge them into the respective local branches
$ git pull --tags // fetch and merge all tags from the remote repository into your local repository.
$ git pull <remote> <branch_name>  // to pull files from repository
$ git pull origin <branch_name> 
$ git pull origin  // if on the same branch then branch name not needed
$ git pull --rebase  //This combines git fetch and git rebase
$ git pull --no-commit  //prevents Git from automatically creating a new merge commit when pulling changes


--Remote
$ git remote  //To check the configuration of the remote server
$ git remote [-v | --verbose]   //show the URLs that Git has stored as a short name
$ git remote add <remote_short_name><remote URL>  //add a remote as a short name
$ git remote rename <old name><new name>  // rename a remote short name
$ git remote show <remote_short_name>  //show additional information about a particular remote
$ git remote set-url <remote_short_name> <newURL>   //change the remote UR
$ git pull <short name>  //we can use <short name> on the command line in place of the whole remote URL. git pull command automatically fetches and then merges the remote data into your current branch - $ git pull origin master
$ git clone [remote_short_name | URL]  //To clone the remote repository from your remote projects
$ git push <remote_short_name><branch> //To update the main branch of the project - $ git push origin master 
$ git push -f  //Force push data:
$ git remote [rm | remove] <destination>  //remove a remote connection from a repository
$ git push origin -delete edited  //Delete a remote branch by push command

--Fetch
$ git fetch< repository Url>  //Fetch the remote repository
$ git fetch <remote_short_name>   //To fetch the data from your remote projects but not merge with existing files.
$ git fetch origin  
$ git fetch  //not automatically merge the changes into your current branch. After fetching, you can review the changes and decide whether to merge them using git merge or git rebase.
$ git fetch --all //Fetch all the branches simultaneously
$ git fetch --tags //fetches tags from the remote repository. This is useful if you want to get the latest tags from the remote without fetching all branches 
$ git fetch --prune  // remove any remote branches that no longer exist on the remote repository
$ git fetch --depth=<depth> //allows you to limit the amount of history fetched from the remote repository like -> git fetch --depth=1


-- Branch Related
$ git branch // lists all branches 
$ git branch --list
$ git branch <branch name>  // create a branch
$ git branch -d   //Delete a Branch:
$ git push origin -delete   //Delete a remote Branch:
$ git branch -m  //Rename Branch:
$ git checkout <branch name> //Switch to a particular branch
$ git checkout -b <branch name> //Create a new branch and switch to it
$ git branch -r  //To see a list of all the remote branches available
$ git checkout -t origin/feature-branch  ////Switch to a remote branch

$ git stash  //Switch branches without committing the current branch
$ git stash save ""  //Saving stashes with a message
$ git stash list  //Check the stored stashes
$ git stash apply  //Re-apply the changes that you just stashed
$ git stash show   //Track the stashes and their changes
$ git stash pop  //Re-apply the previous commits
$ git stash drop  //Delete a most recent stash from the queue
$ git stash clear  //Delete all the available stashes at once
$ git stash branch  //Stash work on a separate branch

$ git cherry-pick  //Apply the changes introduced by some existing commit

--Merge
$ git merge <BranchName> //merge the specified branch's history into the current branch.
$ git merge --abort  // If you encounter conflicts during the merge and decide you want to abort the merge

--Git rebase
$ git rebase <branch>   //moves the changes from the current branch to the tip of <branch>.
$ git rebase -i <commit>  //Interactive rebase allows you to interactively edit, reorder, squash, or drop commits from a branch. It opens a text editor that lists the commits to be rebased, and you can modify the list to perform various operations.
$ git rebase --continue  //Continue the rebasing process
$ git rebase --skip  //Abort the rebasing process
$ git rebase --abort  //abandon the rebase during conflict and revert to the original state
$ git pull --rebase  //This combines git fetch and git rebase,
$ git branch --set-upstream-to=<remote>/<branch>  //working on a local branch and want to rebase it on top of a specific remote branch 

--log/Commit History
$ git log   //Display the most recent commits and the status of the head
$ git log -3  //to show only the last three entries.
$ git log -oneline  //Display the output as one commit per line
$ git log -stat  //Displays the files that have been modified
$ git log -p  //Display the modified files with location
$ git blame <file name>  //Display the modification on each line of a file

--Ignoring files
$ touch .gitignore //List the ignored files:
$ git ls-files -i --exclude-standard

--Git alias
--Set up an alias for each command:
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status

--: Undo changes
--Git revert
$ git revert
$ git revert <commit> //<commit> parameter can be a commit hash, a branch name, a tag, or a commit reference -> $git revert abcdef
$ git revert --no-commit <commit>  //revert the changes without automatically creating a new commit
$ git revert --mainline <parent-number> <commit>  // If a commit is the result of a merge, you can use the --mainline option to specify which parent's changes to revert. <parent-number> can be '1' for the first parent or '2' for the second parent
$ git revert --continue //resolving conflicts during a revert or after modifying changes with --no-commit, use this command to continue the revert process and create the new revert commit.
$ git revert --abort //If you decide to cancel the revert process and return to the state before starting the revert, use this command to abort the revert.

--Git reset
$ git reset -hard
$ git reset -soft:
$ git reset --mixed

